package com.github.geekuniversity_java_215.cmsbackend.core.converters.basic;

import com.github.geekuniversity_java_215.cmsbackend.core.converters._base.AbstractMapper;
import com.github.geekuniversity_java_215.cmsbackend.core.converters.user.UserMapper;
import com.github.geekuniversity_java_215.cmsbackend.core.entities.Client;
import com.github.geekuniversity_java_215.cmsbackend.core.services.ClientService;
import com.github.geekuniversity_java_215.cmsbackend.jrpc_protocol.dto.client.ClientDto;
import org.mapstruct.AfterMapping;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;
import org.springframework.beans.factory.annotation.Autowired;

import javax.annotation.PostConstruct;

@Mapper(config = AbstractMapper.class,
    uses = {UserMapper.class})
public abstract class DummyMapper extends AbstractMapper<Client, ClientDto> {

    @PostConstruct
    private void postConstruct() {
        this.baseRepoAccessService = clientService;
        constructor = new EntityConstructor();
    }

    public abstract ClientDto toDto(Client client);

    //@Mapping(target = "user", ignore = true)
    @Mapping(target = "orderList", ignore = true)
    public abstract Client toEntity(ClientDto clientDto);

    @AfterMapping
    void afterMapping(ClientDto source, @MappingTarget Client target) {

        //idMap(source, target);
        merge(source, target);
    }

    protected class EntityConstructor extends Constructor<Client, ClientDto> {
        @Override
        public Client create(ClientDto dto, Client entity) {
            return new Client(
                entity.getUser(),
                dto.getClientSpecificData()
            );
        }
    }

}
